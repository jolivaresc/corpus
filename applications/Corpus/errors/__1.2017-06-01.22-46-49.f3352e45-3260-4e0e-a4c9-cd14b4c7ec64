(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> define_table argument is not a Field or Table: <input name="test" type="radio" value="a" />'
p3
sS'layer'
p4
S'/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/applications/Corpus/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nimport os,sys\n\n\ndef index():\n    #response.flash = os.getcwd()\n    return locals()\n\ndef other():\n    \'\'\'\n    esto ir\xc3\xada en index\n    <form action="{{=URL(\'other\')}}">\n    Your  name?\n    <input name="y_name"/>\n    <br>\n    <input type="submit"/>\n</form>\n    x = request.args\n    y = request.vars\n    return "totototoo r=%s %s" % (x,SPAN(y))\n    path = os.getcwd()\n    response.flash = path\n    model_tf = tfIdf()\n    l = model_tf.search(request.vars.word)\n    probs={}\n    for i,j in l:\n        probs[i]=j\n    #ver como recibir argumentos\n    response.flash = \'Frase: \'+request.vars.word\n    \n    \n    message = \'WORD %s!\' % (request.vars.word)\n    return dict(form=sorted(probs.items(),reverse=True))\n    \'\'\'\n    \n    response.flash = os.getcwd()+\'/applications/Corpus\'\n    path=os.getcwd()\n    sys.path.append(os.getcwd()+\'/applications/Corpus/controllers\')\n    sys.path.append(os.getcwd()+\'/applications/Corpus/controllers/\')\n    os.chdir(os.getcwd()+\'/applications/Corpus/controllers/\')\n    from tfIdf import tfIdf\n    model = tfIdf()\n    os.chdir(path)\n    l = model.search(request.vars.Palabra)\n    probs={}\n    for i,j in l:\n        if i != 0:\n            probs[i]=j\n    os.chdir(path)#\n    message = \'WORD %s!\' % (request.vars.Palabra)\n    return dict(form=sorted(probs.items(),reverse=True))\n\ndef infmutua():\n    response.flash = os.getcwd()\n    path=os.getcwd()\n    sys.path.append(os.getcwd()+\'/applications/Corpus/controllers\')\n    os.chdir(os.getcwd()+\'/applications/Corpus/controllers\')\n    from MI import MI\n    model = MI()\n    mi = model.eval(request.vars.Palabra1,request.vars.Palabra2)\n    message = \'WORD %s %s\' % (request.vars.Palabra1,request.vars.Palabra2)\n    os.chdir(path)\n    return dict(mi=mi)\n\ndef btn1():\n    response.flash= os.getcwd()+\'/Backend\'\n    form = SQLFORM.factory(Field(\'Palabra\',requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        redirect(URL(\'other\',vars={\'Palabra\':form.vars.Palabra}))\n    return locals()\n\ndef btn2():\n    form = SQLFORM.factory(Field(\'Palabra1\',requires=IS_NOT_EMPTY()),\n                           Field(\'Palabra2\',requires=IS_NOT_EMPTY())).process()\n    if form.accepted:\n        redirect(URL(\'infmutua\',vars={\'Palabra1\':form.vars.Palabra1,\'Palabra2\':form.vars.Palabra2}))\n    return dict(form=form)\n\ndef btn3():\n    form = SQLFORM.factory(Field(\'Query\',requires=IS_NOT_EMPTY()),\n                          INPUT(_type=\'radio\', _name=\'test\', _value=\'a\', value=\'b\')\n                          )\n\n\n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(btn3)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/applications/Corpus/controllers/default.py", line 132, in <module>\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/applications/Corpus/controllers/default.py", line 89, in btn3\n    INPUT(_type=\'radio\', _name=\'test\', _value=\'a\', value=\'b\')\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/gluon/sqlhtml.py", line 1808, in factory\n    return SQLFORM(DAL(None).define_table(table_name, *fields),\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/gluon/packages/dal/pydal/base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/jose/Documents/2017_2/Procesamiento de Corpus/Proyecto/web2py/gluon/packages/dal/pydal/objects.py", line 299, in __init__\n    field\nSyntaxError: define_table argument is not a Field or Table: <input name="test" type="radio" value="a" />\n'
p11
s.